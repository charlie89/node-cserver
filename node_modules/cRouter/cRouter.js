(function(context) {
	var url = require("url");
   var cSettings = require('cSettings');

	function default404(req, res) {
		var body = "404'd";
		res.writeHead(404, {
			"Content-Length": body.length,
			"Content-Type": "text/plain"
		});
		res.end(body);

		console.log("Someone 404'd: " + req.url);
	}

	function default503(req, res, err) {
		var body = [ "503'd" ];
		body.push("An exception was thrown while accessing: " + req.method + " " + req.url);
		body.push("Exception: " + err.message);
		body.push(err.stack);
		body = body.join("\n");
		res.writeHead(503, {
			"Content-Length": body.length,
			"Content-Type": "text/plain"
		});
		res.end(body);

		console.error("Error accessing: " + req.method + " " + req.url);
		console.error(err.message);
		console.error(err.stack);
	}

	function parseURL(req){
		var cURL = url.parse(req.url, true);
		var patharr = cURL.pathname.split('/');
		patharr.shift();   // first element is 0
		cURL.api = patharr.shift();
		cURL.path = patharr;
		cURL.pathname = patharr.join('/');
		cURL.method = req.method;
		return cURL;
	}

	function route(newroutes){
		var routes = [];
		function handler(req, res){
			req.cURL = parseURL(req);
         if (cSettings.debug) console.log(req.cURL.method + ' ' + req.cURL.api + '/' + req.cURL.pathname);
			//addSettingsManually(req);
			if (typeof routes[req.cURL.api] !=="undefined"){
				if (typeof routes[req.cURL.api][req.cURL.method] !== 'undefined'){
					if (req.cURL.method === 'POST'){
						var post = "";
						req.on('data', function(data) {
							post += data;
						});
						req.on('end', function() {
							console.log("POST Data: " + post);
								if (post.length > 0)
								   req.post = JSON.parse(post);
								callRoute(routes[req.cURL.api][req.cURL.method], req, res);
						});
						return;
					}
					else
					{
						callRoute(routes[req.cURL.api][req.cURL.method], req, res);
						return;
					}
				}
			}
			default404(req, res);
		}
		function callRoute(route, req, res){
			res.error404 = function(){
				default404(req, res);
			}
			route(req, res);
		}
		handler.add = function(newroutes){
			if (!Array.isArray(newroutes))
			{
				var helper = newroutes;
				newroutes = [helper];
			}
			newroutes.forEach(function(newroute){
				if (typeof routes[newroute.api] !== 'undefined')
					if (typeof routes[newroute.api][newroute.method] !== 'undefined')
						console.warn("WARN: cRouter: Adding double route");
				routes[newroute.api]=routes[newroute.api]||[];
				routes[newroute.api][newroute.method]=newroute.callback;
			});
		}
		handler.add(newroutes);
		return handler;
	}

	function addSettingsManually(req){
		req.user = {};
		req.user.cPluginLoader = {
        "allowedPlugins": [
            "filebrowser",
            "uploader.valums",
            "editor.codemirror",
            "links.crawler",
            "todo"
        ],
        "initPlugins": [],
        "initConfigs": [
            "filebrowser",
            "links.crawler",
            "todo"
        ]
    };
	}

	context.route = route; 
})(exports);
