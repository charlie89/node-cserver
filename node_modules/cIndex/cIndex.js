var fs = require("fs");
var croot = require("cPath").getRootDir() + 'client/';
var gzip = require('gzip');
var isCached = false;
var cache_top = '';
var cache_center = '';
var cache_bottom = '';

exports.route = {
   api: '',
   method: 'GET',
   callback: serve
};

function serve(req, res) {
   if (!isCached) {
      generateCache(req, res);
      return;
   }
   generateSite(req, res);
}

function generateSite(req, res) {
   if (cache_top.length > 0) {
      res.writeHead(200, {
         'Content-Encoding': 'gzip',
         'Content-Type': 'text/html; charset=utf-8'
      });
      var cache = cache_top;
      require("cPluginLoader").loadPlugins(req.user.cPluginLoader.initPlugins, req.user.cPluginLoader.initConfigs, function(plugins) {
         plugins.css.forEach(function(css) {
            cache += css;
         });
         cache += cache_center;
         plugins.js.forEach(function(js) {
            cache += js;
         });
         cache += cache_bottom;
         gzip(cache, function(err, buffer) {
            if (err) throw err;
            res.end(buffer);
         });
      });
   }
   else {
      res.writeHead(404);
      res.end('404 Not Found');
   }
}

function generateCache(req, res) {
   var failed_count = 0;

   function failed() {
      failed_count += 1;
      if (failed_count === 1) readyCallback('', '', '');
   }

   function readIndexFile() {
      fs.readFile(croot + 'index.html', function(err, data) {
         if (err || (typeof data == "undefined")) {
            failed();
            return;
         }
         var arr = data.split("<!-- node-cserver:css -->", 1);
         var top = arr[0];
         arr = arr[1].split('<!-- node-cserver:js -->', 1);
         readyCallback(top, arr[0], arr[1]);
      });
   }

   function readTopCenterBottomFiles() {
      fs.readFile(croot + 'top.html', function(err, data) {
         if (err) {
            failed();
            return;
         }
         var top = data;
         // load includes.json file
         fs.readFile(croot + 'includes.json', function(err, data) {
            if (err) {
               failed();
               return;
            }
            var plugins = JSON.parse(data).plugins;
            require("cPluginLoader").loadPlugins(plugins, null, function(result) {
               result.css.forEach(function(css) {
                  top += css;
               });
               fs.readFile(croot + 'center.html', function(err, data) {
                  if (err) {
                     failed();
                     return;
                  }
                  var center = data;
                  // send all js-Files
                  result.js.forEach(function(js) {
                     center += js;
                  });
                  fs.readFile(croot + 'bottom.html', function(err, data) {
                     if (err) {
                        failed();
                        return;
                     }
                     readyCallback(top, center, data);
                  });
               });
            });
         });
      });
   }

   function readyCallback(top, center, bottom) {
      if (!isCached) {
         isCached = true;
         cache_top = top;
         cache_center = center;
         cache_bottom = bottom;
         generateSite(req, res);
      }
   }

   //call all Site initialiser.. just one should succeed here.
   //readIndexFile(); //doesnt work atm
   readTopCenterBottomFiles();
}