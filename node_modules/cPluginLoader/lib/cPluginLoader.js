var fs = require("fs");
var url = require("url");
var rootDir = require("cPath").getRootDir();
var cSettings = require('cSettings');
//var less = require("less");
var cssmin = require("node-css-compressor").cssmin;
var jsp = require("uglify-js").parser;
var pro = require("uglify-js").uglify;
var gzip = require('gzip');
var cache = [];
var cache_config = [];
var configAPI = {};

exports.route = {
	api: 'cpluginloader', 
	method: 'GET', 
	callback: function(req, res) {
		load(req, res);
	}
};

// sends the module to the client

function load(req, res) {
	res.writeHead(200, {
		'Content-Encoding': 'gzip',
		'Content-Type': 'application/json; charset=UTF-8'
	});
	var plugins = req.cURL.path;
	exports.loadPlugins(plugins, null, function(result) {
		gzip(JSON.stringify(result), function(err, minified) {
			if (err) throw err;
			res.write(minified);
			res.end();
		});
	});
}

// loads one or more package.json-files and then calls parseFiles
exports.loadPlugins = function(plugins, configs, callback) {
	var p = {
		js: [],
		css: [],
		config: cache_config,
		plugins: plugins
	};
	plugins.forEach(function(plugin) {
		if (typeof(cache[plugin]) != 'undefined') {
			cache[plugin].css.forEach(function(css) {
				p.css.push(css);
			});
			cache[plugin].js.forEach(function(js) {
				p.js.push(js);
			});
		}
	});
	if (configs)
		configs.forEach(function(config){
			if (typeof(cache_config[config]) !== 'undefined'){
				cache_config[config].forEach(function(configdata) {
					p.js.push(configdata);
				});
			}
		});
		callback(p);
};

exports.init = function() {
	console.log("cPluginLoader: Caching all plugins");
	// load includes.json and parse js-function for configs
	fs.readFile(rootDir + 'client/includes.json', function(err, data) {
		if (err) throw err;
		configAPI = JSON.parse(data).pluginloaderAPI;
		// load all config-files
		var path = rootDir + 'client/';
		fs.readdir(path, function(err, plugins) {
			if (err) throw err;
			initPlugins(plugins);
		});
	});
};

function initPlugins(plugins) {
	var c = 0;
	var p = [];
	var path = rootDir + 'client/';
	plugins.forEach(function(plugin) {
		var pl = plugin;
		fs.readFile(path + plugin + '/package.json', function(err, json) {
			c++;
			if (!err) {
				var pack = JSON.parse(json);
				p.push({
					name: plugin,
					js: pack.js,
					css: pack.css
				});
				cache[plugin] = {
					js: [],
					css: [],
				};
				if (pack.config) pack.config.forEach(function(conf) {
					var jsconfig = "<script type=\"text/javascript\">";
					jsconfig += configAPI.top + "'" + conf.name + "', " + JSON.stringify(conf.data);
					jsconfig += configAPI.bottom + "</script>\n";
					if (!Array.isArray(cache_config[plugin])) cache_config[plugin] = [];
					cache_config[plugin].push((jsconfig));
				});
			}
			if (c == plugins.length) { // all package.json's loaded
				parsePlugins(p);
			}
		});
	});
}

// reads all given files into an object

function parsePlugins(plugins) {
	var css = 0;
	var js = 0;
	var cssMax = 0;
	var jsMax = 0;

	function sendOnReady() {
		if ((css == cssMax) && (js == jsMax)) {
			console.log("cPluginLoader: Ready");
		}
	}

	plugins.forEach(function(plugin) {
		plugin.css.forEach(function(file) {
			cssMax++;
			fs.readFile(rootDir + 'client/' + plugin.name + '/' + file, function(err, data) {
				css++;
				if (!err) {
					var i = plugin.css.indexOf(file);
					generateCSS(file, data.toString(), function(css){
						cache[plugin.name].css[i] = css;
						sendOnReady();
					});
				} 
				else 
				{
					console.error("cPluginLoader: " + err);
					sendOnReady();
				}
			});
		});
		plugin.js.forEach(function(file) {
			jsMax++;
			fs.readFile(rootDir + 'client/' + plugin.name + '/' + file, function(err, data) {
				js++;
				if (!err) {
					var i = plugin.js.indexOf(file);
					generateJS(file, data.toString(), function(js){
						cache[plugin.name].js[i] = js;
						sendOnReady();
					});
				} else
				{
					console.error("cPluginLoader: " + err);
					sendOnReady();
				}
			});
		});
	});
}

function generateCSS(file, css, callback) {
	function packIntoCSSHeader(css){
		if (!cSettings.debug === true)
		{
			var mini = cssmin(css);
			css = mini;
		}
		return "<style type=\"text/css\"> " + css + " </style> \n";
	}
	//if (file.substring(file.length - 5, file.length) == ".less") {
	//	less.render(css, function(e, lesscss) {
	//		callback(packIntoCSSHeader(lesscss));
	//	});
	//}
	//else {
		callback(packIntoCSSHeader(css));
	//}
}

function generateJS(file, js, callback) {
	function packIntoJSHeader(js){
		if (!cSettings.debug === true) {
			var ast = jsp.parse(js);
			ast = pro.ast_mangle(ast);
			ast = pro.ast_squeeze(ast);
			js = pro.gen_code(ast);
		}
		return "<script type=\"text/javascript\">" + js + "</script>\n";
	}
	if (file.substring(file.length - 5, file.length) == '.tmpl'){
		var tmpl = file.split('/').pop();
		tmpl = tmpl.substring(0, tmpl.length -5);
		callback("<script id=\"" + tmpl + "\" type=\"text/x-jquery-tmpl\">" + js + "</script>\n");
	}
	else {
		callback(packIntoJSHeader(js));
	}
}
